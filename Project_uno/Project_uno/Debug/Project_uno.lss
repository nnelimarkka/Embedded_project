
Project_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000765  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c3  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002eb  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016e  00000000  00000000  00001845  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
	spi_recv = SPDR;
	completeAction(spi_recv);
}

ISR (TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
	TCNT1 = 0; // reset timer counter
  9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <PWM>:

void PWM(uint8_t x)
{
	
	DDRB |= (1 << PB1); // OC1A is located in digital pin 9
  ac:	94 b1       	in	r25, 0x04	; 4
  ae:	92 60       	ori	r25, 0x02	; 2
  b0:	94 b9       	out	0x04, r25	; 4
	
	// Enable interrupts
	sei();
  b2:	78 94       	sei
	
	
	TCCR1B  = 0; 
  b4:	a1 e8       	ldi	r26, 0x81	; 129
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	1c 92       	st	X, r1
	TCCR1A  = 0;
  ba:	e0 e8       	ldi	r30, 0x80	; 128
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	TCNT1   = 0;
  c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	TCCR1A |= (1 << 6); 
  c8:	90 81       	ld	r25, Z
  ca:	90 64       	ori	r25, 0x40	; 64
  cc:	90 83       	st	Z, r25
	
	
	TCCR1A |= (1 << 0); 
  ce:	90 81       	ld	r25, Z
  d0:	91 60       	ori	r25, 0x01	; 1
  d2:	90 83       	st	Z, r25
	TCCR1B |= (1 << 4); 
  d4:	9c 91       	ld	r25, X
  d6:	90 61       	ori	r25, 0x10	; 16
  d8:	9c 93       	st	X, r25
	
	TIMSK1 |= (1 << 1); // enable compare match A interrupt
  da:	ef e6       	ldi	r30, 0x6F	; 111
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	92 60       	ori	r25, 0x02	; 2
  e2:	90 83       	st	Z, r25
	
	OCR1A = (x==1) ? 2440 : 0;  
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	19 f4       	brne	.+6      	; 0xee <PWM+0x42>
  e8:	28 e8       	ldi	r18, 0x88	; 136
  ea:	39 e0       	ldi	r19, 0x09	; 9
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <PWM+0x46>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = (x==1) ? 500 : 0;
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	19 f4       	brne	.+6      	; 0x104 <PWM+0x58>
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	02 c0       	rjmp	.+4      	; 0x108 <PWM+0x5c>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 10c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 110:	08 95       	ret

00000112 <completeAction>:
void PWM(uint8_t x);


void completeAction(uint8_t command)
{
	switch (command)
 112:	83 31       	cpi	r24, 0x13	; 19
 114:	41 f0       	breq	.+16     	; 0x126 <completeAction+0x14>
 116:	84 31       	cpi	r24, 0x14	; 20
 118:	59 f4       	brne	.+22     	; 0x130 <completeAction+0x1e>
	{
		case 20:
			buzzerEnable = TRUE;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PWM(1);
 120:	0e 94 56 00 	call	0xac	; 0xac <PWM>
			break;
 124:	08 95       	ret
		case 19:
			buzzerEnable = FALSE;
 126:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PWM(0);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 56 00 	call	0xac	; 0xac <PWM>
 130:	08 95       	ret

00000132 <__vector_17>:
			break;
	}
}

ISR (SPI_STC_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	spi_recv = SPDR;
 154:	8e b5       	in	r24, 0x2e	; 46
 156:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <spi_recv>
	completeAction(spi_recv);
 15a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <spi_recv>
 15e:	0e 94 89 00 	call	0x112	; 0x112 <completeAction>
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <main>:

int
main(void)
{
	/* set MISO as output, pin 12 (PB4)*/
	DDRB  = (1 << PB4);
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	84 b9       	out	0x04, r24	; 4
	/* set SPI enable */
	SPCR  = (1 << 6);
 188:	80 e4       	ldi	r24, 0x40	; 64
 18a:	8c bd       	out	0x2c, r24	; 44
	
	SPCR |= (1<<SPIE); // Enable SPI Interrupt
 18c:	8c b5       	in	r24, 0x2c	; 44
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	8c bd       	out	0x2c, r24	; 44
	
	DDRD |= (1 << PD7); //LED output
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	80 68       	ori	r24, 0x80	; 128
 196:	8a b9       	out	0x0a, r24	; 10

	sei();
 198:	78 94       	sei
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <main+0x22>
	while (1)
	{
		while(buzzerEnable == TRUE)
		{
			/* enable timer/counter1 */
			TCCR1B |= (1 << 0); // set prescaling to 1 (no prescaling)
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	80 83       	st	Z, r24
	sei();
	
	/* send message to master and receive message from master */
	while (1)
	{
		while(buzzerEnable == TRUE)
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	b9 f3       	breq	.-18     	; 0x19c <main+0x18>
		{
			/* enable timer/counter1 */
			TCCR1B |= (1 << 0); // set prescaling to 1 (no prescaling)
			
		}
		TIMSK1 &= ~(1 << 1); // disable compare match A interrupt
 1ae:	ef e6       	ldi	r30, 0x6F	; 111
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	80 83       	st	Z, r24
	}
 1b8:	f6 cf       	rjmp	.-20     	; 0x1a6 <main+0x22>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
