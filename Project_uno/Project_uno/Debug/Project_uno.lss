
Project_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000001ec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080012e  0080012e  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000903  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077c  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002df  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  9e:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_init>:

static void
USART_init(uint16_t ubrr) // unsigned int
{
	/* Set baud rate in the USART Baud Rate Registers (UBRR) */
	UBRR0H = (unsigned char) (ubrr >> 8);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable receiver and transmitter on RX0 and TX0 */
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega328p has 1 UART: 0
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 61       	ori	r24, 0x18	; 24
  b6:	80 83       	st	Z, r24
	
	/* Set frame format: 8 bit data, 2 stop bit */
	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
  b8:	e2 ec       	ldi	r30, 0xC2	; 194
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8e 60       	ori	r24, 0x0E	; 14
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <USART_Transmit>:

static void
USART_Transmit(unsigned char data, FILE *stream)
{
	/* Wait until the transmit buffer is empty*/
	while(!(UCSR0A & (1 << UDRE0)))
  c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	95 ff       	sbrs	r25, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <USART_Transmit>
	{
		;
	}
	
	/* Put the data into a buffer, then send/transmit the data */
	UDR0 = data;
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d0:	08 95       	ret

000000d2 <USART_Receive>:

static char
USART_Receive(FILE *stream)
{
	/* Wait until the transmit buffer is empty*/
	while(!(UCSR0A & (1 << UDRE0)))
  d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d6:	85 ff       	sbrs	r24, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <USART_Receive>
	{
		;
	}
	
	/* Get the received data from the buffer */
	return UDR0;
  da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  de:	08 95       	ret

000000e0 <completeAction>:
volatile uint8_t spi_recv;

//LED on pin7 for now
void completeAction(uint8_t command)
{
	switch (command)
  e0:	83 31       	cpi	r24, 0x13	; 19
  e2:	31 f0       	breq	.+12     	; 0xf0 <completeAction+0x10>
  e4:	84 31       	cpi	r24, 0x14	; 20
  e6:	41 f4       	brne	.+16     	; 0xf8 <completeAction+0x18>
	{
		case 20:
			PORTD |= (1 << PD7);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8b b9       	out	0x0b, r24	; 11
			break;
  ee:	08 95       	ret
		case 19:
			PORTD &= ~(1 << PD7);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	8b b9       	out	0x0b, r24	; 11
			break;
  f6:	08 95       	ret
		default:
			printf("incorrect command\n");
  f8:	8c e1       	ldi	r24, 0x1C	; 28
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 c4 00 	call	0x188	; 0x188 <puts>
 100:	08 95       	ret

00000102 <__vector_17>:
	/* Get the received data from the buffer */
	return UDR0;
}

ISR (SPI_STC_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	spi_recv = SPDR;
 124:	8e b5       	in	r24, 0x2e	; 46
 126:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	completeAction(spi_recv);
 12a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 12e:	0e 94 70 00 	call	0xe0	; 0xe0 <completeAction>
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <main>:

int
main(void)
{
	/* set MISO as output, pin 12 (PB4)*/
	DDRB  = (1 << PB4);
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	84 b9       	out	0x04, r24	; 4
	/* set SPI enable */
	SPCR  = (1 << 6);
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	8c bd       	out	0x2c, r24	; 44
	
	SPCR |= (1<<SPIE); // Enable SPI Interrupt
 15c:	8c b5       	in	r24, 0x2c	; 44
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	8c bd       	out	0x2c, r24	; 44
	
	DDRD |= (1 << PD7); //LED output
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	80 68       	ori	r24, 0x80	; 128
 166:	8a b9       	out	0x0a, r24	; 10
	
	// initialize the UART with 9600 BAUD
	USART_init(MYUBRR);
 168:	87 e6       	ldi	r24, 0x67	; 103
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init>
	
	// redirect the stdin and stdout to UART functions
	stdout = &uart_output;
 170:	ef e2       	ldi	r30, 0x2F	; 47
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	93 83       	std	Z+3, r25	; 0x03
 17a:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	80 83       	st	Z, r24
	
	char spi_send_data[20] = "slave to master\n";
	char spi_receive_data[20];
	
	sei();
 184:	78 94       	sei
 186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x32>

00000188 <puts>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <__iob+0x2>
 194:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <__iob+0x3>
 198:	23 81       	ldd	r18, Z+3	; 0x03
 19a:	21 ff       	sbrs	r18, 1
 19c:	1b c0       	rjmp	.+54     	; 0x1d4 <puts+0x4c>
 19e:	8c 01       	movw	r16, r24
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	f8 01       	movw	r30, r16
 1a6:	81 91       	ld	r24, Z+
 1a8:	8f 01       	movw	r16, r30
 1aa:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <__iob+0x2>
 1ae:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <__iob+0x3>
 1b2:	db 01       	movw	r26, r22
 1b4:	18 96       	adiw	r26, 0x08	; 8
 1b6:	ed 91       	ld	r30, X+
 1b8:	fc 91       	ld	r31, X
 1ba:	19 97       	sbiw	r26, 0x09	; 9
 1bc:	88 23       	and	r24, r24
 1be:	31 f0       	breq	.+12     	; 0x1cc <puts+0x44>
 1c0:	09 95       	icall
 1c2:	89 2b       	or	r24, r25
 1c4:	79 f3       	breq	.-34     	; 0x1a4 <puts+0x1c>
 1c6:	df ef       	ldi	r29, 0xFF	; 255
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
 1ca:	ec cf       	rjmp	.-40     	; 0x1a4 <puts+0x1c>
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	09 95       	icall
 1d0:	89 2b       	or	r24, r25
 1d2:	19 f0       	breq	.+6      	; 0x1da <puts+0x52>
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <puts+0x56>
 1da:	8d 2f       	mov	r24, r29
 1dc:	9c 2f       	mov	r25, r28
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
