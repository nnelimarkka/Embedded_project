
Project_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000739  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068c  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c4  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000126  00000000  00000000  000017a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
	spi_recv = SPDR;
	completeAction(spi_recv);
}

ISR (TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
	TCNT1 = 0; // reset timer counter
  9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <PWM>:

void PWM()
{
	/* set up the ports and pins */
	DDRB |= (1 << PB1); // OC1A is located in digital pin 9
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	84 b9       	out	0x04, r24	; 4
	
	// Enable interrupts
	sei();
  b2:	78 94       	sei
	
	/* set up the 16-bit timer/counter1, mode 9 used */
	TCCR1B  = 0; // reset timer/counter 1
  b4:	a1 e8       	ldi	r26, 0x81	; 129
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	1c 92       	st	X, r1
	TCCR1A  = 0;
  ba:	e0 e8       	ldi	r30, 0x80	; 128
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	TCNT1   = 0;
  c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	TCCR1A |= (1 << 6); // set compare output mode to toggle
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	
	// mode 9 phase correct
	TCCR1A |= (1 << 0); // set register A WGM[1:0] bits
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
	TCCR1B |= (1 << 4); // set register B WBM[3:2] bits
  d4:	8c 91       	ld	r24, X
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	8c 93       	st	X, r24
	
	TIMSK1 |= (1 << 1); // enable compare match A interrupt
  da:	ef e6       	ldi	r30, 0x6F	; 111
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
	
	OCR1A = 2440;   // A7 3250 Hz, no prescaler, empirical
  e4:	88 e8       	ldi	r24, 0x88	; 136
  e6:	99 e0       	ldi	r25, 0x09	; 9
  e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 500;
  f0:	84 ef       	ldi	r24, 0xF4	; 244
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	while(buzzerEnable == TRUE)
  fc:	05 c0       	rjmp	.+10     	; 0x108 <PWM+0x5c>
	{
		/* enable timer/counter1 */
		TCCR1B |= (1 << 0); // set prescaling to 1 (no prescaling)
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
	TIMSK1 |= (1 << 1); // enable compare match A interrupt
	
	OCR1A = 2440;   // A7 3250 Hz, no prescaler, empirical
	OCR1B = 500;
	
	while(buzzerEnable == TRUE)
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	b9 f3       	breq	.-18     	; 0xfe <PWM+0x52>
	{
		/* enable timer/counter1 */
		TCCR1B |= (1 << 0); // set prescaling to 1 (no prescaling)
		
	}
	TIMSK1 &= ~(1 << 1); // disable compare match A interrupt
 110:	ef e6       	ldi	r30, 0x6F	; 111
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <completeAction>:
void PWM();

//LED on pin7 for now
void completeAction(uint8_t command)
{
	switch (command)
 11c:	83 31       	cpi	r24, 0x13	; 19
 11e:	41 f0       	breq	.+16     	; 0x130 <completeAction+0x14>
 120:	84 31       	cpi	r24, 0x14	; 20
 122:	41 f4       	brne	.+16     	; 0x134 <completeAction+0x18>
	{
		case 20:
			buzzerEnable = TRUE;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PWM();
 12a:	0e 94 56 00 	call	0xac	; 0xac <PWM>
			break;
 12e:	08 95       	ret
		case 19:
			buzzerEnable = FALSE;
 130:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	08 95       	ret

00000136 <__vector_17>:
			break;
	}
}

ISR (SPI_STC_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	spi_recv = SPDR;
 158:	8e b5       	in	r24, 0x2e	; 46
 15a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <spi_recv>
	completeAction(spi_recv);
 15e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <spi_recv>
 162:	0e 94 8e 00 	call	0x11c	; 0x11c <completeAction>
}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:

int
main(void)
{
	/* set MISO as output, pin 12 (PB4)*/
	DDRB  = (1 << PB4);
 188:	80 e1       	ldi	r24, 0x10	; 16
 18a:	84 b9       	out	0x04, r24	; 4
	/* set SPI enable */
	SPCR  = (1 << 6);
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	8c bd       	out	0x2c, r24	; 44
	
	SPCR |= (1<<SPIE); // Enable SPI Interrupt
 190:	8c b5       	in	r24, 0x2c	; 44
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8c bd       	out	0x2c, r24	; 44
	
	DDRD |= (1 << PD7); //LED output
 196:	8a b1       	in	r24, 0x0a	; 10
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	8a b9       	out	0x0a, r24	; 10

	sei();
 19c:	78 94       	sei
 19e:	ff cf       	rjmp	.-2      	; 0x19e <main+0x16>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
