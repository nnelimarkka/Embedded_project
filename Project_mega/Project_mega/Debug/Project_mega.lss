
Project_mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00000520  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800236  00800236  000005ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001664  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ecc  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000980  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  000035cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d4  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d0  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000464c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ce c1       	rjmp	.+924    	; 0x3ee <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 33       	cpi	r26, 0x39	; 57
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a7 d1       	rcall	.+846    	; 0x46e <main>
 120:	fd c1       	rjmp	.+1018   	; 0x51c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 124:	85 b1       	in	r24, 0x05	; 5
 126:	80 62       	ori	r24, 0x20	; 32
 128:	85 b9       	out	0x05, r24	; 5
 12a:	00 00       	nop
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	85 b9       	out	0x05, r24	; 5
 132:	08 95       	ret

00000134 <lcd_write>:
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
 138:	66 23       	and	r22, r22
 13a:	31 f0       	breq	.+12     	; 0x148 <lcd_write+0x14>
 13c:	e2 e0       	ldi	r30, 0x02	; 2
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 83       	st	Z, r24
 146:	05 c0       	rjmp	.+10     	; 0x152 <lcd_write+0x1e>
 148:	e2 e0       	ldi	r30, 0x02	; 2
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	80 81       	ld	r24, Z
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	80 83       	st	Z, r24
 152:	85 b1       	in	r24, 0x05	; 5
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	85 b9       	out	0x05, r24	; 5
 158:	8d b1       	in	r24, 0x0d	; 13
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	8d b9       	out	0x0d, r24	; 13
 15e:	83 b3       	in	r24, 0x13	; 19
 160:	80 62       	ori	r24, 0x20	; 32
 162:	83 bb       	out	0x13, r24	; 19
 164:	8d b1       	in	r24, 0x0d	; 13
 166:	88 60       	ori	r24, 0x08	; 8
 168:	8d b9       	out	0x0d, r24	; 13
 16a:	e1 e0       	ldi	r30, 0x01	; 1
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
 174:	e2 e0       	ldi	r30, 0x02	; 2
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	80 81       	ld	r24, Z
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	80 83       	st	Z, r24
 17e:	8e b1       	in	r24, 0x0e	; 14
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	8e b9       	out	0x0e, r24	; 14
 184:	84 b3       	in	r24, 0x14	; 20
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	84 bb       	out	0x14, r24	; 20
 18a:	8e b1       	in	r24, 0x0e	; 14
 18c:	8f 7d       	andi	r24, 0xDF	; 223
 18e:	8e b9       	out	0x0e, r24	; 14
 190:	cc 23       	and	r28, r28
 192:	1c f4       	brge	.+6      	; 0x19a <lcd_write+0x66>
 194:	80 81       	ld	r24, Z
 196:	88 60       	ori	r24, 0x08	; 8
 198:	80 83       	st	Z, r24
 19a:	c6 ff       	sbrs	r28, 6
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_write+0x70>
 19e:	8e b1       	in	r24, 0x0e	; 14
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	8e b9       	out	0x0e, r24	; 14
 1a4:	c5 ff       	sbrs	r28, 5
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_write+0x7a>
 1a8:	84 b3       	in	r24, 0x14	; 20
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	84 bb       	out	0x14, r24	; 20
 1ae:	c4 ff       	sbrs	r28, 4
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0x84>
 1b2:	8e b1       	in	r24, 0x0e	; 14
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	8e b9       	out	0x0e, r24	; 14
 1b8:	b5 df       	rcall	.-150    	; 0x124 <toggle_e>
 1ba:	e2 e0       	ldi	r30, 0x02	; 2
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	80 81       	ld	r24, Z
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	80 83       	st	Z, r24
 1c4:	8e b1       	in	r24, 0x0e	; 14
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	8e b9       	out	0x0e, r24	; 14
 1ca:	84 b3       	in	r24, 0x14	; 20
 1cc:	8f 7d       	andi	r24, 0xDF	; 223
 1ce:	84 bb       	out	0x14, r24	; 20
 1d0:	8e b1       	in	r24, 0x0e	; 14
 1d2:	8f 7d       	andi	r24, 0xDF	; 223
 1d4:	8e b9       	out	0x0e, r24	; 14
 1d6:	c3 ff       	sbrs	r28, 3
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <lcd_write+0xac>
 1da:	80 81       	ld	r24, Z
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	80 83       	st	Z, r24
 1e0:	c2 ff       	sbrs	r28, 2
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <lcd_write+0xb6>
 1e4:	8e b1       	in	r24, 0x0e	; 14
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	8e b9       	out	0x0e, r24	; 14
 1ea:	c1 ff       	sbrs	r28, 1
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <lcd_write+0xc0>
 1ee:	84 b3       	in	r24, 0x14	; 20
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	84 bb       	out	0x14, r24	; 20
 1f4:	c0 ff       	sbrs	r28, 0
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <lcd_write+0xca>
 1f8:	8e b1       	in	r24, 0x0e	; 14
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	8e b9       	out	0x0e, r24	; 14
 1fe:	92 df       	rcall	.-220    	; 0x124 <toggle_e>
 200:	8e b1       	in	r24, 0x0e	; 14
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8e b9       	out	0x0e, r24	; 14
 206:	84 b3       	in	r24, 0x14	; 20
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	84 bb       	out	0x14, r24	; 20
 20c:	8e b1       	in	r24, 0x0e	; 14
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	8e b9       	out	0x0e, r24	; 14
 212:	e2 e0       	ldi	r30, 0x02	; 2
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	88 60       	ori	r24, 0x08	; 8
 21a:	80 83       	st	Z, r24
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <lcd_read>:
 220:	88 23       	and	r24, r24
 222:	31 f0       	breq	.+12     	; 0x230 <lcd_read+0x10>
 224:	e2 e0       	ldi	r30, 0x02	; 2
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	80 81       	ld	r24, Z
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	80 83       	st	Z, r24
 22e:	05 c0       	rjmp	.+10     	; 0x23a <lcd_read+0x1a>
 230:	e2 e0       	ldi	r30, 0x02	; 2
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	80 81       	ld	r24, Z
 236:	8f 7b       	andi	r24, 0xBF	; 191
 238:	80 83       	st	Z, r24
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	80 61       	ori	r24, 0x10	; 16
 23e:	85 b9       	out	0x05, r24	; 5
 240:	8d b1       	in	r24, 0x0d	; 13
 242:	8f 7d       	andi	r24, 0xDF	; 223
 244:	8d b9       	out	0x0d, r24	; 13
 246:	83 b3       	in	r24, 0x13	; 19
 248:	8f 7d       	andi	r24, 0xDF	; 223
 24a:	83 bb       	out	0x13, r24	; 19
 24c:	8d b1       	in	r24, 0x0d	; 13
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	8d b9       	out	0x0d, r24	; 13
 252:	e1 e0       	ldi	r30, 0x01	; 1
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	80 81       	ld	r24, Z
 258:	87 7f       	andi	r24, 0xF7	; 247
 25a:	80 83       	st	Z, r24
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	80 62       	ori	r24, 0x20	; 32
 260:	85 b9       	out	0x05, r24	; 5
 262:	00 00       	nop
 264:	65 99       	sbic	0x0c, 5	; 12
 266:	02 c0       	rjmp	.+4      	; 0x26c <lcd_read+0x4c>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	01 c0       	rjmp	.+2      	; 0x26e <lcd_read+0x4e>
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	95 99       	sbic	0x12, 5	; 18
 270:	80 62       	ori	r24, 0x20	; 32
 272:	63 99       	sbic	0x0c, 3	; 12
 274:	80 64       	ori	r24, 0x40	; 64
 276:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 27a:	93 fd       	sbrc	r25, 3
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	95 b1       	in	r25, 0x05	; 5
 280:	9f 7d       	andi	r25, 0xDF	; 223
 282:	95 b9       	out	0x05, r25	; 5
 284:	00 00       	nop
 286:	95 b1       	in	r25, 0x05	; 5
 288:	90 62       	ori	r25, 0x20	; 32
 28a:	95 b9       	out	0x05, r25	; 5
 28c:	00 00       	nop
 28e:	65 99       	sbic	0x0c, 5	; 12
 290:	81 60       	ori	r24, 0x01	; 1
 292:	95 99       	sbic	0x12, 5	; 18
 294:	82 60       	ori	r24, 0x02	; 2
 296:	63 99       	sbic	0x0c, 3	; 12
 298:	84 60       	ori	r24, 0x04	; 4
 29a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 29e:	93 fd       	sbrc	r25, 3
 2a0:	88 60       	ori	r24, 0x08	; 8
 2a2:	95 b1       	in	r25, 0x05	; 5
 2a4:	9f 7d       	andi	r25, 0xDF	; 223
 2a6:	95 b9       	out	0x05, r25	; 5
 2a8:	08 95       	ret

000002aa <lcd_waitbusy>:
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	b9 df       	rcall	.-142    	; 0x220 <lcd_read>
 2ae:	88 23       	and	r24, r24
 2b0:	e4 f3       	brlt	.-8      	; 0x2aa <lcd_waitbusy>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_waitbusy+0xa>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <lcd_waitbusy+0xc>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	b3 cf       	rjmp	.-154    	; 0x220 <lcd_read>
 2ba:	08 95       	ret

000002bc <lcd_command>:
 2bc:	cf 93       	push	r28
 2be:	c8 2f       	mov	r28, r24
 2c0:	f4 df       	rcall	.-24     	; 0x2aa <lcd_waitbusy>
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	8c 2f       	mov	r24, r28
 2c6:	36 df       	rcall	.-404    	; 0x134 <lcd_write>
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <lcd_gotoxy>:
 2cc:	61 11       	cpse	r22, r1
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <lcd_gotoxy+0xa>
 2d0:	80 58       	subi	r24, 0x80	; 128
 2d2:	f4 cf       	rjmp	.-24     	; 0x2bc <lcd_command>
 2d4:	08 95       	ret
 2d6:	80 54       	subi	r24, 0x40	; 64
 2d8:	f1 cf       	rjmp	.-30     	; 0x2bc <lcd_command>
 2da:	08 95       	ret

000002dc <lcd_clrscr>:
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	ee cf       	rjmp	.-36     	; 0x2bc <lcd_command>
 2e0:	08 95       	ret

000002e2 <lcd_putc>:
 2e2:	cf 93       	push	r28
 2e4:	c8 2f       	mov	r28, r24
 2e6:	e1 df       	rcall	.-62     	; 0x2aa <lcd_waitbusy>
 2e8:	ca 30       	cpi	r28, 0x0A	; 10
 2ea:	41 f4       	brne	.+16     	; 0x2fc <lcd_putc+0x1a>
 2ec:	80 34       	cpi	r24, 0x40	; 64
 2ee:	10 f4       	brcc	.+4      	; 0x2f4 <lcd_putc+0x12>
 2f0:	80 e4       	ldi	r24, 0x40	; 64
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <lcd_putc+0x14>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	80 58       	subi	r24, 0x80	; 128
 2f8:	e1 df       	rcall	.-62     	; 0x2bc <lcd_command>
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <lcd_putc+0x20>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	8c 2f       	mov	r24, r28
 300:	19 df       	rcall	.-462    	; 0x134 <lcd_write>
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <lcd_puts>:
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	fc 01       	movw	r30, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <lcd_puts+0xc>
 30e:	e9 df       	rcall	.-46     	; 0x2e2 <lcd_putc>
 310:	fe 01       	movw	r30, r28
 312:	ef 01       	movw	r28, r30
 314:	21 96       	adiw	r28, 0x01	; 1
 316:	80 81       	ld	r24, Z
 318:	81 11       	cpse	r24, r1
 31a:	f9 cf       	rjmp	.-14     	; 0x30e <lcd_puts+0x8>
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 322:	cf 93       	push	r28
 324:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 326:	e1 e0       	ldi	r30, 0x01	; 1
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	80 81       	ld	r24, Z
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 330:	84 b1       	in	r24, 0x04	; 4
 332:	80 61       	ori	r24, 0x10	; 16
 334:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 336:	84 b1       	in	r24, 0x04	; 4
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 33c:	8d b1       	in	r24, 0x0d	; 13
 33e:	80 62       	ori	r24, 0x20	; 32
 340:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 342:	83 b3       	in	r24, 0x13	; 19
 344:	80 62       	ori	r24, 0x20	; 32
 346:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 348:	8d b1       	in	r24, 0x0d	; 13
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 34e:	80 81       	ld	r24, Z
 350:	88 60       	ori	r24, 0x08	; 8
 352:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	8f e9       	ldi	r24, 0x9F	; 159
 356:	9f e0       	ldi	r25, 0x0F	; 15
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x36>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <lcd_init+0x3c>
 35e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 360:	84 b3       	in	r24, 0x14	; 20
 362:	80 62       	ori	r24, 0x20	; 32
 364:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 366:	8e b1       	in	r24, 0x0e	; 14
 368:	80 62       	ori	r24, 0x20	; 32
 36a:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
 36c:	db de       	rcall	.-586    	; 0x124 <toggle_e>
 36e:	81 ee       	ldi	r24, 0xE1	; 225
 370:	94 e0       	ldi	r25, 0x04	; 4
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <lcd_init+0x50>
 376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 378:	00 00       	nop
 37a:	d4 de       	rcall	.-600    	; 0x124 <toggle_e>
 37c:	95 e1       	ldi	r25, 0x15	; 21
 37e:	9a 95       	dec	r25
 380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 382:	00 00       	nop
 384:	cf de       	rcall	.-610    	; 0x124 <toggle_e>
 386:	85 e1       	ldi	r24, 0x15	; 21
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <lcd_init+0x66>
 38c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 38e:	8e b1       	in	r24, 0x0e	; 14
 390:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
 392:	8e b9       	out	0x0e, r24	; 14
 394:	c7 de       	rcall	.-626    	; 0x124 <toggle_e>
 396:	95 e1       	ldi	r25, 0x15	; 21
 398:	9a 95       	dec	r25
 39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 39c:	00 00       	nop
 39e:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3a0:	8d df       	rcall	.-230    	; 0x2bc <lcd_command>
 3a2:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 3a4:	8b df       	rcall	.-234    	; 0x2bc <lcd_command>
 3a6:	9a df       	rcall	.-204    	; 0x2dc <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	88 df       	rcall	.-240    	; 0x2bc <lcd_command>
 3ac:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
 3ae:	86 df       	rcall	.-244    	; 0x2bc <lcd_command>
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <sendCommand>:

void sendCommand(uint8_t command)
{
	/* send byte to slave */
	
	PORTB &= ~(1 << PB0); // SS LOW
 3b4:	95 b1       	in	r25, 0x05	; 5
 3b6:	9e 7f       	andi	r25, 0xFE	; 254
 3b8:	95 b9       	out	0x05, r25	; 5
	
	
	SPDR = command; // send byte using SPI data register
 3ba:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1 << SPIF)))
 3bc:	0d b4       	in	r0, 0x2d	; 45
 3be:	07 fe       	sbrs	r0, 7
 3c0:	fd cf       	rjmp	.-6      	; 0x3bc <sendCommand+0x8>
		/* wait until the transmission is complete */
		;
	}
	
	
	PORTB |= (1 << PB0); // SS HIGH
 3c2:	85 b1       	in	r24, 0x05	; 5
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	85 b9       	out	0x05, r24	; 5
 3c8:	08 95       	ret

000003ca <lcd_clearRow>:
}

void lcd_clearRow(uint8_t row)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
	lcd_gotoxy(0,row);
 3ce:	68 2f       	mov	r22, r24
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	7c df       	rcall	.-264    	; 0x2cc <lcd_gotoxy>
	for (int i = 0; i< CHARCOUNT; i++)
 3d4:	c0 e0       	ldi	r28, 0x00	; 0
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <lcd_clearRow+0x18>
	{
		lcd_puts(" ");
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	93 df       	rcall	.-218    	; 0x306 <lcd_puts>
}

void lcd_clearRow(uint8_t row)
{
	lcd_gotoxy(0,row);
	for (int i = 0; i< CHARCOUNT; i++)
 3e0:	21 96       	adiw	r28, 0x01	; 1
 3e2:	c0 31       	cpi	r28, 0x10	; 16
 3e4:	d1 05       	cpc	r29, r1
 3e6:	cc f3       	brlt	.-14     	; 0x3da <lcd_clearRow+0x10>
	{
		lcd_puts(" ");
	}
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <__vector_20>:

/* timer/counter1 fires every ~4 seconds*/
ISR (TIMER1_OVF_vect)
{
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	0b b6       	in	r0, 0x3b	; 59
 3fa:	0f 92       	push	r0
 3fc:	2f 93       	push	r18
 3fe:	3f 93       	push	r19
 400:	4f 93       	push	r20
 402:	5f 93       	push	r21
 404:	6f 93       	push	r22
 406:	7f 93       	push	r23
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	af 93       	push	r26
 40e:	bf 93       	push	r27
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
	interruptCount++;
 414:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
 418:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <__data_end+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__data_end+0x1>
 422:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
	if (interruptCount == 5) //~20 second timeout for password input
 426:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
 42a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <__data_end+0x1>
 42e:	05 97       	sbiw	r24, 0x05	; 5
 430:	59 f4       	brne	.+22     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	{
		sendCommand(20);
 432:	84 e1       	ldi	r24, 0x14	; 20
 434:	bf df       	rcall	.-130    	; 0x3b4 <sendCommand>
		
		interruptCount = 0;
 436:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__data_end+0x1>
 43a:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__data_end>
		
		TIMSK1 &= ~(1 << TOIE1); // disable overflow interrupt
 43e:	ef e6       	ldi	r30, 0x6F	; 111
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	8e 7f       	andi	r24, 0xFE	; 254
 446:	80 83       	st	Z, r24
	}
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	7f 91       	pop	r23
 456:	6f 91       	pop	r22
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	0f 90       	pop	r0
 462:	0b be       	out	0x3b, r0	; 59
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <main>:

int
main(void)
{
	/* set SS, MOSI and SCK as output, pins 53 (PB0), 51 (PB2) and 52 (PB1) */
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // SS as output
 46e:	84 b1       	in	r24, 0x04	; 4
 470:	87 60       	ori	r24, 0x07	; 7
 472:	84 b9       	out	0x04, r24	; 4
	/* set SPI enable and master/slave select, making MEGA the master */
	SPCR |= (1 << 6) | (1 << 4);
 474:	8c b5       	in	r24, 0x2c	; 44
 476:	80 65       	ori	r24, 0x50	; 80
 478:	8c bd       	out	0x2c, r24	; 44
	/* set SPI clock rate to 1 MHz */
	SPCR |= (1 << 0);
 47a:	8c b5       	in	r24, 0x2c	; 44
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	8c bd       	out	0x2c, r24	; 44
	
	/* Set PIR as input */
	DDRH &= ~(1 << PH4);
 480:	e1 e0       	ldi	r30, 0x01	; 1
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	80 81       	ld	r24, Z
 486:	8f 7e       	andi	r24, 0xEF	; 239
 488:	80 83       	st	Z, r24
	
	/* Initialize lcd */
	lcd_init(LCD_DISP_ON);
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	4a df       	rcall	.-364    	; 0x322 <lcd_init>
	
	lcd_clrscr();
 48e:	26 df       	rcall	.-436    	; 0x2dc <lcd_clrscr>
 490:	82 e0       	ldi	r24, 0x02	; 2
	
	lcd_puts("Alarm system");
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	38 df       	rcall	.-400    	; 0x306 <lcd_puts>
 496:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <state>
	
	while (1)
	{
		switch(state)
 49a:	88 23       	and	r24, r24
 49c:	19 f0       	breq	.+6      	; 0x4a4 <main+0x36>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	e1 f0       	breq	.+56     	; 0x4da <main+0x6c>
 4a2:	f9 cf       	rjmp	.-14     	; 0x496 <main+0x28>
 4a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
		{
			case ACTIVATED:
			/* Check PIR value */
			if ((PINH & (1 << PH4)) == (1 << PH4))
 4a8:	84 ff       	sbrs	r24, 4
 4aa:	0c c0       	rjmp	.+24     	; 0x4c4 <main+0x56>
			{
				//motion detected
				lcd_clearRow(1);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	8d df       	rcall	.-230    	; 0x3ca <lcd_clearRow>
				lcd_gotoxy(0,1);
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0b df       	rcall	.-490    	; 0x2cc <lcd_gotoxy>
				lcd_puts("Motion detected");
 4b6:	8f e0       	ldi	r24, 0x0F	; 15
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	25 df       	rcall	.-438    	; 0x306 <lcd_puts>
				state = SETTIMER;
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <state>
				} else {
				//no motion
				lcd_clearRow(1);
 4c2:	e9 cf       	rjmp	.-46     	; 0x496 <main+0x28>
 4c4:	81 e0       	ldi	r24, 0x01	; 1
				lcd_gotoxy(0,1);
 4c6:	81 df       	rcall	.-254    	; 0x3ca <lcd_clearRow>
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	80 e0       	ldi	r24, 0x00	; 0
				lcd_puts("No motion");
 4cc:	ff de       	rcall	.-514    	; 0x2cc <lcd_gotoxy>
 4ce:	8f e1       	ldi	r24, 0x1F	; 31
 4d0:	92 e0       	ldi	r25, 0x02	; 2
				state = ACTIVATED;
 4d2:	19 df       	rcall	.-462    	; 0x306 <lcd_puts>
 4d4:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <state>
			}
			break;
			
			case SETTIMER:
			lcd_clearRow(1);
 4d8:	de cf       	rjmp	.-68     	; 0x496 <main+0x28>
 4da:	81 e0       	ldi	r24, 0x01	; 1
			lcd_gotoxy(0,1);
 4dc:	76 df       	rcall	.-276    	; 0x3ca <lcd_clearRow>
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	f4 de       	rcall	.-536    	; 0x2cc <lcd_gotoxy>
			lcd_puts("timer start");
 4e4:	89 e2       	ldi	r24, 0x29	; 41
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	0e df       	rcall	.-484    	; 0x306 <lcd_puts>
 4ea:	f8 94       	cli
			
			cli();
 4ec:	e4 e6       	ldi	r30, 0x64	; 100
			
			/* set up the 16-bit timer/counter1 */
			PRR0 &= ~(1 << PRTIM1);
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	87 7f       	andi	r24, 0xF7	; 247
 4f4:	80 83       	st	Z, r24
 4f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
			TCNT1 = 0; // reset timer/counter1 register
 4fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 4fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
			TCCR1A = 0x00;
 502:	85 e0       	ldi	r24, 0x05	; 5
			TCCR1B = 0b00000101;
 504:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 508:	ef e6       	ldi	r30, 0x6F	; 111
			
			TIMSK1 |= (1 << TOIE1); // enable overflow interrupt
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	80 83       	st	Z, r24
 512:	78 94       	sei
			sei();
 514:	82 e0       	ldi	r24, 0x02	; 2
			state = ASKPASSWORD;
 516:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <state>
 51a:	bd cf       	rjmp	.-134    	; 0x496 <main+0x28>

0000051c <_exit>:
			break;
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
