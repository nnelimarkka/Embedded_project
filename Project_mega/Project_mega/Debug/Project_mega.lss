
Project_mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  0000099a  00000a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080025a  0080025a  00000a88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d02  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001071  00000000  00000000  00002902  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec6  00000000  00000000  00003973  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  0000483c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000793  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000db9  00000000  00000000  00005263  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	c3 c2       	rjmp	.+1414   	; 0x5d8 <__vector_20>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7b 01       	movw	r14, r22
  e6:	83 01       	movw	r16, r6
  e8:	83 01       	movw	r16, r6
  ea:	83 01       	movw	r16, r6
  ec:	7d 01       	movw	r14, r26
  ee:	83 01       	movw	r16, r6
  f0:	7f 01       	movw	r14, r30
  f2:	81 01       	movw	r16, r2
  f4:	83 01       	movw	r16, r6
  f6:	83 01       	movw	r16, r6
  f8:	83 01       	movw	r16, r6
  fa:	83 01       	movw	r16, r6
  fc:	83 01       	movw	r16, r6
  fe:	83 01       	movw	r16, r6
 100:	83 01       	movw	r16, r6
 102:	83 01       	movw	r16, r6
 104:	83 01       	movw	r16, r6
 106:	83 01       	movw	r16, r6
 108:	83 01       	movw	r16, r6
 10a:	83 01       	movw	r16, r6
 10c:	83 01       	movw	r16, r6
 10e:	83 01       	movw	r16, r6
 110:	83 01       	movw	r16, r6
 112:	83 01       	movw	r16, r6
 114:	83 01       	movw	r16, r6
 116:	83 01       	movw	r16, r6
 118:	83 01       	movw	r16, r6
 11a:	83 01       	movw	r16, r6
 11c:	83 01       	movw	r16, r6
 11e:	83 01       	movw	r16, r6
 120:	83 01       	movw	r16, r6
 122:	83 01       	movw	r16, r6
 124:	83 01       	movw	r16, r6
 126:	83 01       	movw	r16, r6
 128:	83 01       	movw	r16, r6
 12a:	83 01       	movw	r16, r6
 12c:	83 01       	movw	r16, r6
 12e:	83 01       	movw	r16, r6
 130:	83 01       	movw	r16, r6
 132:	83 01       	movw	r16, r6
 134:	83 01       	movw	r16, r6
 136:	83 01       	movw	r16, r6
 138:	83 01       	movw	r16, r6
 13a:	83 01       	movw	r16, r6
 13c:	83 01       	movw	r16, r6
 13e:	83 01       	movw	r16, r6
 140:	83 01       	movw	r16, r6
 142:	83 01       	movw	r16, r6
 144:	83 01       	movw	r16, r6
 146:	83 01       	movw	r16, r6
 148:	83 01       	movw	r16, r6
 14a:	83 01       	movw	r16, r6
 14c:	83 01       	movw	r16, r6
 14e:	83 01       	movw	r16, r6
 150:	83 01       	movw	r16, r6
 152:	83 01       	movw	r16, r6
 154:	83 01       	movw	r16, r6
 156:	83 01       	movw	r16, r6
 158:	83 01       	movw	r16, r6
 15a:	83 01       	movw	r16, r6
 15c:	83 01       	movw	r16, r6
 15e:	83 01       	movw	r16, r6
 160:	83 01       	movw	r16, r6
 162:	83 01       	movw	r16, r6
 164:	73 01       	movw	r14, r6
 166:	83 01       	movw	r16, r6
 168:	83 01       	movw	r16, r6
 16a:	83 01       	movw	r16, r6
 16c:	75 01       	movw	r14, r10
 16e:	83 01       	movw	r16, r6
 170:	77 01       	movw	r14, r14
 172:	79 01       	movw	r14, r18
 174:	83 01       	movw	r16, r6
 176:	83 01       	movw	r16, r6
 178:	83 01       	movw	r16, r6
 17a:	83 01       	movw	r16, r6
 17c:	83 01       	movw	r16, r6
 17e:	83 01       	movw	r16, r6
 180:	83 01       	movw	r16, r6
 182:	83 01       	movw	r16, r6
 184:	83 01       	movw	r16, r6
 186:	83 01       	movw	r16, r6
 188:	83 01       	movw	r16, r6
 18a:	83 01       	movw	r16, r6
 18c:	83 01       	movw	r16, r6
 18e:	83 01       	movw	r16, r6
 190:	83 01       	movw	r16, r6
 192:	83 01       	movw	r16, r6
 194:	83 01       	movw	r16, r6
 196:	83 01       	movw	r16, r6
 198:	83 01       	movw	r16, r6
 19a:	83 01       	movw	r16, r6
 19c:	83 01       	movw	r16, r6
 19e:	83 01       	movw	r16, r6
 1a0:	83 01       	movw	r16, r6
 1a2:	83 01       	movw	r16, r6
 1a4:	6b 01       	movw	r12, r22
 1a6:	83 01       	movw	r16, r6
 1a8:	83 01       	movw	r16, r6
 1aa:	83 01       	movw	r16, r6
 1ac:	6d 01       	movw	r12, r26
 1ae:	83 01       	movw	r16, r6
 1b0:	6f 01       	movw	r12, r30
 1b2:	71 01       	movw	r14, r2
 1b4:	83 01       	movw	r16, r6
 1b6:	83 01       	movw	r16, r6
 1b8:	83 01       	movw	r16, r6
 1ba:	83 01       	movw	r16, r6
 1bc:	83 01       	movw	r16, r6
 1be:	83 01       	movw	r16, r6
 1c0:	83 01       	movw	r16, r6
 1c2:	83 01       	movw	r16, r6
 1c4:	65 01       	movw	r12, r10
 1c6:	83 01       	movw	r16, r6
 1c8:	83 01       	movw	r16, r6
 1ca:	83 01       	movw	r16, r6
 1cc:	85 01       	movw	r16, r10
 1ce:	83 01       	movw	r16, r6
 1d0:	67 01       	movw	r12, r14
 1d2:	69 01       	movw	r12, r18

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ea e9       	ldi	r30, 0x9A	; 154
 1ec:	f9 e0       	ldi	r31, 0x09	; 9
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	aa 35       	cpi	r26, 0x5A	; 90
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	aa e5       	ldi	r26, 0x5A	; 90
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	ad 35       	cpi	r26, 0x5D	; 93
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	3f d3       	rcall	.+1662   	; 0x88e <main>
 210:	c2 c3       	rjmp	.+1924   	; 0x996 <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <keypad_ScanKey>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	9f ee       	ldi	r25, 0xEF	; 239
 218:	10 c0       	rjmp	.+32     	; 0x23a <keypad_ScanKey+0x26>
 21a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 21e:	e9 ef       	ldi	r30, 0xF9	; 249
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <keypad_ScanKey+0xe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <keypad_ScanKey+0x14>
 228:	00 00       	nop
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	8f 30       	cpi	r24, 0x0F	; 15
 232:	29 f4       	brne	.+10     	; 0x23e <keypad_ScanKey+0x2a>
 234:	99 0f       	add	r25, r25
 236:	9f 5f       	subi	r25, 0xFF	; 255
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	70 f3       	brcs	.-36     	; 0x21a <keypad_ScanKey+0x6>
 23e:	90 7f       	andi	r25, 0xF0	; 240
 240:	89 0f       	add	r24, r25
 242:	08 95       	ret

00000244 <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
 24a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 24e:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
 250:	8f 30       	cpi	r24, 0x0F	; 15
 252:	c1 f7       	brne	.-16     	; 0x244 <KEYPAD_WaitForKeyRelease>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	89 ef       	ldi	r24, 0xF9	; 249
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <KEYPAD_WaitForKeyRelease+0x14>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <KEYPAD_WaitForKeyRelease+0x1a>
 25e:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
 266:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 26a:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
 26c:	8f 30       	cpi	r24, 0x0F	; 15
 26e:	51 f7       	brne	.-44     	; 0x244 <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
 270:	08 95       	ret

00000272 <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
 278:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 27c:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
 27e:	8f 30       	cpi	r24, 0x0F	; 15
 280:	c1 f3       	breq	.-16     	; 0x272 <KEYPAD_WaitForKeyPress>
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <KEYPAD_WaitForKeyPress+0x14>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <KEYPAD_WaitForKeyPress+0x1a>
 28c:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
 28e:	8f e0       	ldi	r24, 0x0F	; 15
 290:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
 294:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 298:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
 29a:	8f 30       	cpi	r24, 0x0F	; 15
 29c:	51 f3       	breq	.-44     	; 0x272 <KEYPAD_WaitForKeyPress>
}
 29e:	08 95       	ret

000002a0 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
 2a0:	d1 df       	rcall	.-94     	; 0x244 <KEYPAD_WaitForKeyRelease>
 2a2:	89 ef       	ldi	r24, 0xF9	; 249
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <KEYPAD_GetKey+0x6>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 2ac:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 2ae:	e1 df       	rcall	.-62     	; 0x272 <KEYPAD_WaitForKeyPress>
 2b0:	b1 df       	rcall	.-158    	; 0x214 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	e7 57       	subi	r30, 0x77	; 119
 2b8:	f1 09       	sbc	r31, r1
 2ba:	e8 37       	cpi	r30, 0x78	; 120
 2bc:	f1 05       	cpc	r31, r1
 2be:	18 f5       	brcc	.+70     	; 0x306 <KEYPAD_GetKey+0x66>
 2c0:	88 27       	eor	r24, r24
 2c2:	ee 58       	subi	r30, 0x8E	; 142
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	8f 4f       	sbci	r24, 0xFF	; 255
 2c8:	5e c3       	rjmp	.+1724   	; 0x986 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 2ca:	8a e2       	ldi	r24, 0x2A	; 42
 2cc:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 2ce:	84 e3       	ldi	r24, 0x34	; 52
 2d0:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 2d2:	81 e3       	ldi	r24, 0x31	; 49
 2d4:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 2d6:	80 e3       	ldi	r24, 0x30	; 48
 2d8:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 2da:	88 e3       	ldi	r24, 0x38	; 56
 2dc:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 2de:	85 e3       	ldi	r24, 0x35	; 53
 2e0:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 2e2:	82 e3       	ldi	r24, 0x32	; 50
 2e4:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 2e6:	83 e2       	ldi	r24, 0x23	; 35
 2e8:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 2ea:	89 e3       	ldi	r24, 0x39	; 57
 2ec:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 2ee:	86 e3       	ldi	r24, 0x36	; 54
 2f0:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 2f2:	83 e3       	ldi	r24, 0x33	; 51
 2f4:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 2f6:	84 e4       	ldi	r24, 0x44	; 68
 2f8:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 2fa:	83 e4       	ldi	r24, 0x43	; 67
 2fc:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 2fe:	82 e4       	ldi	r24, 0x42	; 66
 300:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 302:	81 e4       	ldi	r24, 0x41	; 65
 304:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 306:	8a e7       	ldi	r24, 0x7A	; 122
 308:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 30a:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 30c:	08 95       	ret

0000030e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	80 62       	ori	r24, 0x20	; 32
 312:	85 b9       	out	0x05, r24	; 5
 314:	00 00       	nop
 316:	85 b1       	in	r24, 0x05	; 5
 318:	8f 7d       	andi	r24, 0xDF	; 223
 31a:	85 b9       	out	0x05, r24	; 5
 31c:	08 95       	ret

0000031e <lcd_write>:
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
 322:	66 23       	and	r22, r22
 324:	31 f0       	breq	.+12     	; 0x332 <lcd_write+0x14>
 326:	e2 e0       	ldi	r30, 0x02	; 2
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	80 81       	ld	r24, Z
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	80 83       	st	Z, r24
 330:	05 c0       	rjmp	.+10     	; 0x33c <lcd_write+0x1e>
 332:	e2 e0       	ldi	r30, 0x02	; 2
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	80 81       	ld	r24, Z
 338:	8f 7b       	andi	r24, 0xBF	; 191
 33a:	80 83       	st	Z, r24
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	8f 7e       	andi	r24, 0xEF	; 239
 340:	85 b9       	out	0x05, r24	; 5
 342:	8d b1       	in	r24, 0x0d	; 13
 344:	80 62       	ori	r24, 0x20	; 32
 346:	8d b9       	out	0x0d, r24	; 13
 348:	83 b3       	in	r24, 0x13	; 19
 34a:	80 62       	ori	r24, 0x20	; 32
 34c:	83 bb       	out	0x13, r24	; 19
 34e:	8d b1       	in	r24, 0x0d	; 13
 350:	88 60       	ori	r24, 0x08	; 8
 352:	8d b9       	out	0x0d, r24	; 13
 354:	e1 e0       	ldi	r30, 0x01	; 1
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	80 81       	ld	r24, Z
 35a:	88 60       	ori	r24, 0x08	; 8
 35c:	80 83       	st	Z, r24
 35e:	e2 e0       	ldi	r30, 0x02	; 2
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	80 81       	ld	r24, Z
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	80 83       	st	Z, r24
 368:	8e b1       	in	r24, 0x0e	; 14
 36a:	87 7f       	andi	r24, 0xF7	; 247
 36c:	8e b9       	out	0x0e, r24	; 14
 36e:	84 b3       	in	r24, 0x14	; 20
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	84 bb       	out	0x14, r24	; 20
 374:	8e b1       	in	r24, 0x0e	; 14
 376:	8f 7d       	andi	r24, 0xDF	; 223
 378:	8e b9       	out	0x0e, r24	; 14
 37a:	cc 23       	and	r28, r28
 37c:	1c f4       	brge	.+6      	; 0x384 <lcd_write+0x66>
 37e:	80 81       	ld	r24, Z
 380:	88 60       	ori	r24, 0x08	; 8
 382:	80 83       	st	Z, r24
 384:	c6 ff       	sbrs	r28, 6
 386:	03 c0       	rjmp	.+6      	; 0x38e <lcd_write+0x70>
 388:	8e b1       	in	r24, 0x0e	; 14
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	8e b9       	out	0x0e, r24	; 14
 38e:	c5 ff       	sbrs	r28, 5
 390:	03 c0       	rjmp	.+6      	; 0x398 <lcd_write+0x7a>
 392:	84 b3       	in	r24, 0x14	; 20
 394:	80 62       	ori	r24, 0x20	; 32
 396:	84 bb       	out	0x14, r24	; 20
 398:	c4 ff       	sbrs	r28, 4
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <lcd_write+0x84>
 39c:	8e b1       	in	r24, 0x0e	; 14
 39e:	80 62       	ori	r24, 0x20	; 32
 3a0:	8e b9       	out	0x0e, r24	; 14
 3a2:	b5 df       	rcall	.-150    	; 0x30e <toggle_e>
 3a4:	e2 e0       	ldi	r30, 0x02	; 2
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	80 81       	ld	r24, Z
 3aa:	87 7f       	andi	r24, 0xF7	; 247
 3ac:	80 83       	st	Z, r24
 3ae:	8e b1       	in	r24, 0x0e	; 14
 3b0:	87 7f       	andi	r24, 0xF7	; 247
 3b2:	8e b9       	out	0x0e, r24	; 14
 3b4:	84 b3       	in	r24, 0x14	; 20
 3b6:	8f 7d       	andi	r24, 0xDF	; 223
 3b8:	84 bb       	out	0x14, r24	; 20
 3ba:	8e b1       	in	r24, 0x0e	; 14
 3bc:	8f 7d       	andi	r24, 0xDF	; 223
 3be:	8e b9       	out	0x0e, r24	; 14
 3c0:	c3 ff       	sbrs	r28, 3
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <lcd_write+0xac>
 3c4:	80 81       	ld	r24, Z
 3c6:	88 60       	ori	r24, 0x08	; 8
 3c8:	80 83       	st	Z, r24
 3ca:	c2 ff       	sbrs	r28, 2
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <lcd_write+0xb6>
 3ce:	8e b1       	in	r24, 0x0e	; 14
 3d0:	88 60       	ori	r24, 0x08	; 8
 3d2:	8e b9       	out	0x0e, r24	; 14
 3d4:	c1 ff       	sbrs	r28, 1
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <lcd_write+0xc0>
 3d8:	84 b3       	in	r24, 0x14	; 20
 3da:	80 62       	ori	r24, 0x20	; 32
 3dc:	84 bb       	out	0x14, r24	; 20
 3de:	c0 ff       	sbrs	r28, 0
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <lcd_write+0xca>
 3e2:	8e b1       	in	r24, 0x0e	; 14
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	8e b9       	out	0x0e, r24	; 14
 3e8:	92 df       	rcall	.-220    	; 0x30e <toggle_e>
 3ea:	8e b1       	in	r24, 0x0e	; 14
 3ec:	80 62       	ori	r24, 0x20	; 32
 3ee:	8e b9       	out	0x0e, r24	; 14
 3f0:	84 b3       	in	r24, 0x14	; 20
 3f2:	80 62       	ori	r24, 0x20	; 32
 3f4:	84 bb       	out	0x14, r24	; 20
 3f6:	8e b1       	in	r24, 0x0e	; 14
 3f8:	88 60       	ori	r24, 0x08	; 8
 3fa:	8e b9       	out	0x0e, r24	; 14
 3fc:	e2 e0       	ldi	r30, 0x02	; 2
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	80 81       	ld	r24, Z
 402:	88 60       	ori	r24, 0x08	; 8
 404:	80 83       	st	Z, r24
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <lcd_read>:
 40a:	88 23       	and	r24, r24
 40c:	31 f0       	breq	.+12     	; 0x41a <lcd_read+0x10>
 40e:	e2 e0       	ldi	r30, 0x02	; 2
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	80 81       	ld	r24, Z
 414:	80 64       	ori	r24, 0x40	; 64
 416:	80 83       	st	Z, r24
 418:	05 c0       	rjmp	.+10     	; 0x424 <lcd_read+0x1a>
 41a:	e2 e0       	ldi	r30, 0x02	; 2
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	80 81       	ld	r24, Z
 420:	8f 7b       	andi	r24, 0xBF	; 191
 422:	80 83       	st	Z, r24
 424:	85 b1       	in	r24, 0x05	; 5
 426:	80 61       	ori	r24, 0x10	; 16
 428:	85 b9       	out	0x05, r24	; 5
 42a:	8d b1       	in	r24, 0x0d	; 13
 42c:	8f 7d       	andi	r24, 0xDF	; 223
 42e:	8d b9       	out	0x0d, r24	; 13
 430:	83 b3       	in	r24, 0x13	; 19
 432:	8f 7d       	andi	r24, 0xDF	; 223
 434:	83 bb       	out	0x13, r24	; 19
 436:	8d b1       	in	r24, 0x0d	; 13
 438:	87 7f       	andi	r24, 0xF7	; 247
 43a:	8d b9       	out	0x0d, r24	; 13
 43c:	e1 e0       	ldi	r30, 0x01	; 1
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	80 81       	ld	r24, Z
 442:	87 7f       	andi	r24, 0xF7	; 247
 444:	80 83       	st	Z, r24
 446:	85 b1       	in	r24, 0x05	; 5
 448:	80 62       	ori	r24, 0x20	; 32
 44a:	85 b9       	out	0x05, r24	; 5
 44c:	00 00       	nop
 44e:	65 99       	sbic	0x0c, 5	; 12
 450:	02 c0       	rjmp	.+4      	; 0x456 <lcd_read+0x4c>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	01 c0       	rjmp	.+2      	; 0x458 <lcd_read+0x4e>
 456:	80 e1       	ldi	r24, 0x10	; 16
 458:	95 99       	sbic	0x12, 5	; 18
 45a:	80 62       	ori	r24, 0x20	; 32
 45c:	63 99       	sbic	0x0c, 3	; 12
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 464:	93 fd       	sbrc	r25, 3
 466:	80 68       	ori	r24, 0x80	; 128
 468:	95 b1       	in	r25, 0x05	; 5
 46a:	9f 7d       	andi	r25, 0xDF	; 223
 46c:	95 b9       	out	0x05, r25	; 5
 46e:	00 00       	nop
 470:	95 b1       	in	r25, 0x05	; 5
 472:	90 62       	ori	r25, 0x20	; 32
 474:	95 b9       	out	0x05, r25	; 5
 476:	00 00       	nop
 478:	65 99       	sbic	0x0c, 5	; 12
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	95 99       	sbic	0x12, 5	; 18
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	63 99       	sbic	0x0c, 3	; 12
 482:	84 60       	ori	r24, 0x04	; 4
 484:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 488:	93 fd       	sbrc	r25, 3
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	95 b1       	in	r25, 0x05	; 5
 48e:	9f 7d       	andi	r25, 0xDF	; 223
 490:	95 b9       	out	0x05, r25	; 5
 492:	08 95       	ret

00000494 <lcd_waitbusy>:
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	b9 df       	rcall	.-142    	; 0x40a <lcd_read>
 498:	88 23       	and	r24, r24
 49a:	e4 f3       	brlt	.-8      	; 0x494 <lcd_waitbusy>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <lcd_waitbusy+0xa>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <lcd_waitbusy+0xc>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	b3 cf       	rjmp	.-154    	; 0x40a <lcd_read>
 4a4:	08 95       	ret

000004a6 <lcd_command>:
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
 4aa:	f4 df       	rcall	.-24     	; 0x494 <lcd_waitbusy>
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	8c 2f       	mov	r24, r28
 4b0:	36 df       	rcall	.-404    	; 0x31e <lcd_write>
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <lcd_gotoxy>:
 4b6:	61 11       	cpse	r22, r1
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <lcd_gotoxy+0xa>
 4ba:	80 58       	subi	r24, 0x80	; 128
 4bc:	f4 cf       	rjmp	.-24     	; 0x4a6 <lcd_command>
 4be:	08 95       	ret
 4c0:	80 54       	subi	r24, 0x40	; 64
 4c2:	f1 cf       	rjmp	.-30     	; 0x4a6 <lcd_command>
 4c4:	08 95       	ret

000004c6 <lcd_clrscr>:
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	ee cf       	rjmp	.-36     	; 0x4a6 <lcd_command>
 4ca:	08 95       	ret

000004cc <lcd_putc>:
 4cc:	cf 93       	push	r28
 4ce:	c8 2f       	mov	r28, r24
 4d0:	e1 df       	rcall	.-62     	; 0x494 <lcd_waitbusy>
 4d2:	ca 30       	cpi	r28, 0x0A	; 10
 4d4:	41 f4       	brne	.+16     	; 0x4e6 <lcd_putc+0x1a>
 4d6:	80 34       	cpi	r24, 0x40	; 64
 4d8:	10 f4       	brcc	.+4      	; 0x4de <lcd_putc+0x12>
 4da:	80 e4       	ldi	r24, 0x40	; 64
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <lcd_putc+0x14>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	80 58       	subi	r24, 0x80	; 128
 4e2:	e1 df       	rcall	.-62     	; 0x4a6 <lcd_command>
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <lcd_putc+0x20>
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	8c 2f       	mov	r24, r28
 4ea:	19 df       	rcall	.-462    	; 0x31e <lcd_write>
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <lcd_puts>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	fc 01       	movw	r30, r24
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <lcd_puts+0xc>
 4f8:	e9 df       	rcall	.-46     	; 0x4cc <lcd_putc>
 4fa:	fe 01       	movw	r30, r28
 4fc:	ef 01       	movw	r28, r30
 4fe:	21 96       	adiw	r28, 0x01	; 1
 500:	80 81       	ld	r24, Z
 502:	81 11       	cpse	r24, r1
 504:	f9 cf       	rjmp	.-14     	; 0x4f8 <lcd_puts+0x8>
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 50c:	cf 93       	push	r28
 50e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 510:	e1 e0       	ldi	r30, 0x01	; 1
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	80 81       	ld	r24, Z
 516:	80 64       	ori	r24, 0x40	; 64
 518:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 51a:	84 b1       	in	r24, 0x04	; 4
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 520:	84 b1       	in	r24, 0x04	; 4
 522:	80 62       	ori	r24, 0x20	; 32
 524:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 526:	8d b1       	in	r24, 0x0d	; 13
 528:	80 62       	ori	r24, 0x20	; 32
 52a:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 52c:	83 b3       	in	r24, 0x13	; 19
 52e:	80 62       	ori	r24, 0x20	; 32
 530:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 532:	8d b1       	in	r24, 0x0d	; 13
 534:	88 60       	ori	r24, 0x08	; 8
 536:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 538:	80 81       	ld	r24, Z
 53a:	88 60       	ori	r24, 0x08	; 8
 53c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53e:	8f e9       	ldi	r24, 0x9F	; 159
 540:	9f e0       	ldi	r25, 0x0F	; 15
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <lcd_init+0x36>
 546:	00 c0       	rjmp	.+0      	; 0x548 <lcd_init+0x3c>
 548:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 54a:	84 b3       	in	r24, 0x14	; 20
 54c:	80 62       	ori	r24, 0x20	; 32
 54e:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 550:	8e b1       	in	r24, 0x0e	; 14
 552:	80 62       	ori	r24, 0x20	; 32
 554:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
 556:	db de       	rcall	.-586    	; 0x30e <toggle_e>
 558:	81 ee       	ldi	r24, 0xE1	; 225
 55a:	94 e0       	ldi	r25, 0x04	; 4
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <lcd_init+0x50>
 560:	00 c0       	rjmp	.+0      	; 0x562 <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 562:	00 00       	nop
 564:	d4 de       	rcall	.-600    	; 0x30e <toggle_e>
 566:	95 e1       	ldi	r25, 0x15	; 21
 568:	9a 95       	dec	r25
 56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 56c:	00 00       	nop
 56e:	cf de       	rcall	.-610    	; 0x30e <toggle_e>
 570:	85 e1       	ldi	r24, 0x15	; 21
 572:	8a 95       	dec	r24
 574:	f1 f7       	brne	.-4      	; 0x572 <lcd_init+0x66>
 576:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 578:	8e b1       	in	r24, 0x0e	; 14
 57a:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
 57c:	8e b9       	out	0x0e, r24	; 14
 57e:	c7 de       	rcall	.-626    	; 0x30e <toggle_e>
 580:	95 e1       	ldi	r25, 0x15	; 21
 582:	9a 95       	dec	r25
 584:	f1 f7       	brne	.-4      	; 0x582 <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 586:	00 00       	nop
 588:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 58a:	8d df       	rcall	.-230    	; 0x4a6 <lcd_command>
 58c:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 58e:	8b df       	rcall	.-234    	; 0x4a6 <lcd_command>
 590:	9a df       	rcall	.-204    	; 0x4c6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 592:	86 e0       	ldi	r24, 0x06	; 6
 594:	88 df       	rcall	.-240    	; 0x4a6 <lcd_command>
 596:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
 598:	86 df       	rcall	.-244    	; 0x4a6 <lcd_command>
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <sendCommand>:

void sendCommand(uint8_t command)
{
	/* send byte to slave */
	
	PORTB &= ~(1 << PB0); // SS LOW
 59e:	95 b1       	in	r25, 0x05	; 5
 5a0:	9e 7f       	andi	r25, 0xFE	; 254
 5a2:	95 b9       	out	0x05, r25	; 5
	
	
	SPDR = command; // send byte using SPI data register
 5a4:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1 << SPIF)))
 5a6:	0d b4       	in	r0, 0x2d	; 45
 5a8:	07 fe       	sbrs	r0, 7
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <sendCommand+0x8>
		/* wait until the transmission is complete */
		;
	}
	
	
	PORTB |= (1 << PB0); // SS HIGH
 5ac:	85 b1       	in	r24, 0x05	; 5
 5ae:	81 60       	ori	r24, 0x01	; 1
 5b0:	85 b9       	out	0x05, r24	; 5
 5b2:	08 95       	ret

000005b4 <lcd_clearRow>:
}

void lcd_clearRow(uint8_t row)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
	lcd_gotoxy(0,row);
 5b8:	68 2f       	mov	r22, r24
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	7c df       	rcall	.-264    	; 0x4b6 <lcd_gotoxy>
	for (int i = 0; i< CHARCOUNT; i++)
 5be:	c0 e0       	ldi	r28, 0x00	; 0
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
 5c2:	04 c0       	rjmp	.+8      	; 0x5cc <lcd_clearRow+0x18>
	{
		lcd_puts(" ");
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	92 e0       	ldi	r25, 0x02	; 2
 5c8:	93 df       	rcall	.-218    	; 0x4f0 <lcd_puts>
}

void lcd_clearRow(uint8_t row)
{
	lcd_gotoxy(0,row);
	for (int i = 0; i< CHARCOUNT; i++)
 5ca:	21 96       	adiw	r28, 0x01	; 1
 5cc:	c0 31       	cpi	r28, 0x10	; 16
 5ce:	d1 05       	cpc	r29, r1
 5d0:	cc f3       	brlt	.-14     	; 0x5c4 <lcd_clearRow+0x10>
	{
		lcd_puts(" ");
	}
}
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <__vector_20>:

/* timer/counter1 fires every ~4 seconds*/
ISR (TIMER1_OVF_vect)
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	0b b6       	in	r0, 0x3b	; 59
 5e4:	0f 92       	push	r0
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	ef 93       	push	r30
 5fc:	ff 93       	push	r31
	interruptCount++;
 5fe:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
 602:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__data_end+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <__data_end+0x1>
 60c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <__data_end>
	if (interruptCount == 5) //~20 second timeout for password input
 610:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
 614:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__data_end+0x1>
 618:	05 97       	sbiw	r24, 0x05	; 5
 61a:	59 f4       	brne	.+22     	; 0x632 <__vector_20+0x5a>
	{
		sendCommand(ALARM);
 61c:	84 e1       	ldi	r24, 0x14	; 20
 61e:	bf df       	rcall	.-130    	; 0x59e <sendCommand>
		
		interruptCount = 0;
 620:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <__data_end+0x1>
 624:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <__data_end>
		
		TIMSK1 &= ~(1 << TOIE1); // disable overflow interrupt
 628:	ef e6       	ldi	r30, 0x6F	; 111
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	8e 7f       	andi	r24, 0xFE	; 254
 630:	80 83       	st	Z, r24
	}
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0b be       	out	0x3b, r0	; 59
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <keypad>:
	}
	return 0;
}

uint8_t keypad() 
{
 658:	8f 92       	push	r8
 65a:	9f 92       	push	r9
 65c:	af 92       	push	r10
 65e:	bf 92       	push	r11
 660:	cf 92       	push	r12
 662:	df 92       	push	r13
 664:	ef 92       	push	r14
 666:	ff 92       	push	r15
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	00 d0       	rcall	.+0      	; 0x672 <keypad+0x1a>
 672:	1f 92       	push	r1
 674:	1f 92       	push	r1
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
	uint8_t e =' ';								
	uint8_t f =' ';
	uint8_t g =' ';
	uint8_t h =' ';
	
	char currentPassword[5] = "";
 67a:	1a 82       	std	Y+2, r1	; 0x02
 67c:	19 82       	std	Y+1, r1	; 0x01
 67e:	fe 01       	movw	r30, r28
 680:	33 96       	adiw	r30, 0x03	; 3
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	df 01       	movw	r26, r30
 686:	1d 92       	st	X+, r1
 688:	8a 95       	dec	r24
 68a:	e9 f7       	brne	.-6      	; 0x686 <keypad+0x2e>
	
	for (int i=0;i<PSLENGTH;i++) //Define the correct password (e-h)
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t d =' ';
	uint8_t count =0;							//Define counter to switch between variables
	uint8_t e =' ';								
	uint8_t f =' ';
	uint8_t g =' ';
	uint8_t h =' ';
 690:	68 94       	set
 692:	88 24       	eor	r8, r8
 694:	85 f8       	bld	r8, 5
	uint8_t c =' ';
	uint8_t d =' ';
	uint8_t count =0;							//Define counter to switch between variables
	uint8_t e =' ';								
	uint8_t f =' ';
	uint8_t g =' ';
 696:	68 94       	set
 698:	99 24       	eor	r9, r9
 69a:	95 f8       	bld	r9, 5
	uint8_t b =' ';
	uint8_t c =' ';
	uint8_t d =' ';
	uint8_t count =0;							//Define counter to switch between variables
	uint8_t e =' ';								
	uint8_t f =' ';
 69c:	68 94       	set
 69e:	aa 24       	eor	r10, r10
 6a0:	a5 f8       	bld	r10, 5
	uint8_t a =' ';								//Define variables for storing key presses (a-d)
	uint8_t b =' ';
	uint8_t c =' ';
	uint8_t d =' ';
	uint8_t count =0;							//Define counter to switch between variables
	uint8_t e =' ';								
 6a2:	68 94       	set
 6a4:	bb 24       	eor	r11, r11
 6a6:	b5 f8       	bld	r11, 5
	uint8_t g =' ';
	uint8_t h =' ';
	
	char currentPassword[5] = "";
	
	for (int i=0;i<PSLENGTH;i++) //Define the correct password (e-h)
 6a8:	1c c0       	rjmp	.+56     	; 0x6e2 <keypad+0x8a>
	{
		if (i==0) e = Password[i];
 6aa:	00 97       	sbiw	r24, 0x00	; 0
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <keypad+0x5e>
 6ae:	fc 01       	movw	r30, r24
 6b0:	eb 5a       	subi	r30, 0xAB	; 171
 6b2:	fd 4f       	sbci	r31, 0xFD	; 253
 6b4:	b0 80       	ld	r11, Z
		if (i==1) f = Password[i];
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	91 05       	cpc	r25, r1
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <keypad+0x6c>
 6bc:	fc 01       	movw	r30, r24
 6be:	eb 5a       	subi	r30, 0xAB	; 171
 6c0:	fd 4f       	sbci	r31, 0xFD	; 253
 6c2:	a0 80       	ld	r10, Z
		if (i==2) g = Password[i];
 6c4:	82 30       	cpi	r24, 0x02	; 2
 6c6:	91 05       	cpc	r25, r1
 6c8:	21 f4       	brne	.+8      	; 0x6d2 <keypad+0x7a>
 6ca:	fc 01       	movw	r30, r24
 6cc:	eb 5a       	subi	r30, 0xAB	; 171
 6ce:	fd 4f       	sbci	r31, 0xFD	; 253
 6d0:	90 80       	ld	r9, Z
		if (i==3) h = Password[i];
 6d2:	83 30       	cpi	r24, 0x03	; 3
 6d4:	91 05       	cpc	r25, r1
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <keypad+0x88>
 6d8:	fc 01       	movw	r30, r24
 6da:	eb 5a       	subi	r30, 0xAB	; 171
 6dc:	fd 4f       	sbci	r31, 0xFD	; 253
 6de:	80 80       	ld	r8, Z
	uint8_t g =' ';
	uint8_t h =' ';
	
	char currentPassword[5] = "";
	
	for (int i=0;i<PSLENGTH;i++) //Define the correct password (e-h)
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	84 30       	cpi	r24, 0x04	; 4
 6e4:	91 05       	cpc	r25, r1
 6e6:	0c f3       	brlt	.-62     	; 0x6aa <keypad+0x52>
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	68 94       	set
 6ec:	ee 24       	eor	r14, r14
 6ee:	e5 f8       	bld	r14, 5
 6f0:	68 94       	set
 6f2:	cc 24       	eor	r12, r12
 6f4:	c5 f8       	bld	r12, 5
 6f6:	68 94       	set
 6f8:	dd 24       	eor	r13, r13
 6fa:	d5 f8       	bld	r13, 5
 6fc:	68 94       	set
 6fe:	ff 24       	eor	r15, r15
 700:	f5 f8       	bld	r15, 5
		if (i==2) g = Password[i];
		if (i==3) h = Password[i];
	}
	while(1)
	{
		uint8_t y =KEYPAD_GetKey();				//Receive inputs from keypad
 702:	ce dd       	rcall	.-1124   	; 0x2a0 <KEYPAD_GetKey>
 704:	08 2f       	mov	r16, r24
		if (y=='#')								//# is our submit button
 706:	83 32       	cpi	r24, 0x23	; 35
 708:	09 f4       	brne	.+2      	; 0x70c <keypad+0xb4>
 70a:	9e c0       	rjmp	.+316    	; 0x848 <keypad+0x1f0>
		{
			break;
		}
		if (y=='*')								//* is our backspace
 70c:	8a 32       	cpi	r24, 0x2A	; 42
 70e:	09 f0       	breq	.+2      	; 0x712 <keypad+0xba>
 710:	53 c0       	rjmp	.+166    	; 0x7b8 <keypad+0x160>
		{
			if (count==1)
 712:	11 30       	cpi	r17, 0x01	; 1
 714:	a1 f4       	brne	.+40     	; 0x73e <keypad+0xe6>
			{
				a=' ';
				count=count-1;
 716:	11 50       	subi	r17, 0x01	; 1
				currentPassword[count] = a;
 718:	e1 e0       	ldi	r30, 0x01	; 1
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	ec 0f       	add	r30, r28
 71e:	fd 1f       	adc	r31, r29
 720:	e1 0f       	add	r30, r17
 722:	f1 1d       	adc	r31, r1
 724:	80 e2       	ldi	r24, 0x20	; 32
 726:	80 83       	st	Z, r24
				
				lcd_clearRow(1);
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	44 df       	rcall	.-376    	; 0x5b4 <lcd_clearRow>
				lcd_gotoxy(0,1);
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	c2 de       	rcall	.-636    	; 0x4b6 <lcd_gotoxy>
				lcd_puts(currentPassword);
 732:	ce 01       	movw	r24, r28
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	dc de       	rcall	.-584    	; 0x4f0 <lcd_puts>
 738:	68 94       	set
		}
		if (y=='*')								//* is our backspace
		{
			if (count==1)
			{
				a=' ';
 73a:	ff 24       	eor	r15, r15
 73c:	f5 f8       	bld	r15, 5
 73e:	12 30       	cpi	r17, 0x02	; 2
				
				lcd_clearRow(1);
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==2)
 740:	a1 f4       	brne	.+40     	; 0x76a <keypad+0x112>
 742:	11 50       	subi	r17, 0x01	; 1
			{
				b=' ';
				count=count-1;
 744:	e1 e0       	ldi	r30, 0x01	; 1
				currentPassword[count] = b;
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	ec 0f       	add	r30, r28
 74a:	fd 1f       	adc	r31, r29
 74c:	e1 0f       	add	r30, r17
 74e:	f1 1d       	adc	r31, r1
 750:	80 e2       	ldi	r24, 0x20	; 32
 752:	80 83       	st	Z, r24
				
				lcd_clearRow(1);
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	2e df       	rcall	.-420    	; 0x5b4 <lcd_clearRow>
				lcd_gotoxy(0,1);
 758:	61 e0       	ldi	r22, 0x01	; 1
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	ac de       	rcall	.-680    	; 0x4b6 <lcd_gotoxy>
				lcd_puts(currentPassword);
 75e:	ce 01       	movw	r24, r28
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	c6 de       	rcall	.-628    	; 0x4f0 <lcd_puts>
 764:	68 94       	set
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==2)
			{
				b=' ';
 766:	dd 24       	eor	r13, r13
 768:	d5 f8       	bld	r13, 5
 76a:	13 30       	cpi	r17, 0x03	; 3
				
				lcd_clearRow(1);
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==3)
 76c:	a1 f4       	brne	.+40     	; 0x796 <keypad+0x13e>
 76e:	11 50       	subi	r17, 0x01	; 1
			{
				c=' ';
				count=count-1;
 770:	e1 e0       	ldi	r30, 0x01	; 1
				currentPassword[count] = c;
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	ec 0f       	add	r30, r28
 776:	fd 1f       	adc	r31, r29
 778:	e1 0f       	add	r30, r17
 77a:	f1 1d       	adc	r31, r1
 77c:	80 e2       	ldi	r24, 0x20	; 32
				
				lcd_clearRow(1);
 77e:	80 83       	st	Z, r24
 780:	81 e0       	ldi	r24, 0x01	; 1
				lcd_gotoxy(0,1);
 782:	18 df       	rcall	.-464    	; 0x5b4 <lcd_clearRow>
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	96 de       	rcall	.-724    	; 0x4b6 <lcd_gotoxy>
				lcd_puts(currentPassword);
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	b0 de       	rcall	.-672    	; 0x4f0 <lcd_puts>
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==3)
			{
				c=' ';
 790:	68 94       	set
 792:	cc 24       	eor	r12, r12
				
				lcd_clearRow(1);
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==0)
 794:	c5 f8       	bld	r12, 5
			{
				d=' ';
				count=3;
				currentPassword[count] = d;
 796:	11 11       	cpse	r17, r1
 798:	b4 cf       	rjmp	.-152    	; 0x702 <keypad+0xaa>
				
				lcd_clearRow(1);
 79a:	80 e2       	ldi	r24, 0x20	; 32
 79c:	8c 83       	std	Y+4, r24	; 0x04
 79e:	81 e0       	ldi	r24, 0x01	; 1
				lcd_gotoxy(0,1);
 7a0:	09 df       	rcall	.-494    	; 0x5b4 <lcd_clearRow>
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	87 de       	rcall	.-754    	; 0x4b6 <lcd_gotoxy>
				lcd_puts(currentPassword);
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	a1 de       	rcall	.-702    	; 0x4f0 <lcd_puts>
 7ae:	13 e0       	ldi	r17, 0x03	; 3
				lcd_puts(currentPassword);
			}
			if (count==0)
			{
				d=' ';
				count=3;
 7b0:	68 94       	set
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==0)
			{
				d=' ';
 7b2:	ee 24       	eor	r14, r14
 7b4:	e5 f8       	bld	r14, 5
 7b6:	a5 cf       	rjmp	.-182    	; 0x702 <keypad+0xaa>
			}
		}
		else
		{
			
			if (count==0)
 7b8:	11 11       	cpse	r17, r1
			{
				a=y;
				count=count+1;
 7ba:	11 c0       	rjmp	.+34     	; 0x7de <keypad+0x186>
				currentPassword[count] = a;
 7bc:	1f 5f       	subi	r17, 0xFF	; 255
 7be:	e1 e0       	ldi	r30, 0x01	; 1
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	ec 0f       	add	r30, r28
 7c4:	fd 1f       	adc	r31, r29
 7c6:	e1 0f       	add	r30, r17
				
				lcd_clearRow(1);
 7c8:	f1 1d       	adc	r31, r1
 7ca:	80 83       	st	Z, r24
 7cc:	81 e0       	ldi	r24, 0x01	; 1
				lcd_gotoxy(0,1);
 7ce:	f2 de       	rcall	.-540    	; 0x5b4 <lcd_clearRow>
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	70 de       	rcall	.-800    	; 0x4b6 <lcd_gotoxy>
				lcd_puts(currentPassword);
 7d6:	ce 01       	movw	r24, r28
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	8a de       	rcall	.-748    	; 0x4f0 <lcd_puts>
		else
		{
			
			if (count==0)
			{
				a=y;
 7dc:	f0 2e       	mov	r15, r16
				
				lcd_clearRow(1);
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==1)
 7de:	11 30       	cpi	r17, 0x01	; 1
			{
				b=y;
				count=count+1;
 7e0:	89 f4       	brne	.+34     	; 0x804 <keypad+0x1ac>
				currentPassword[count] = b;
 7e2:	1f 5f       	subi	r17, 0xFF	; 255
 7e4:	e1 e0       	ldi	r30, 0x01	; 1
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	ec 0f       	add	r30, r28
 7ea:	fd 1f       	adc	r31, r29
 7ec:	e1 0f       	add	r30, r17
 7ee:	f1 1d       	adc	r31, r1
				
				lcd_clearRow(1);
 7f0:	00 83       	st	Z, r16
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	df de       	rcall	.-578    	; 0x5b4 <lcd_clearRow>
				lcd_gotoxy(0,1);
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	5d de       	rcall	.-838    	; 0x4b6 <lcd_gotoxy>
				lcd_puts(currentPassword);
 7fc:	ce 01       	movw	r24, r28
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	77 de       	rcall	.-786    	; 0x4f0 <lcd_puts>
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==1)
			{
				b=y;
 802:	d0 2e       	mov	r13, r16
				
				lcd_clearRow(1);
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==2)
 804:	12 30       	cpi	r17, 0x02	; 2
 806:	89 f4       	brne	.+34     	; 0x82a <keypad+0x1d2>
			{
				c=y;
				count=count+1;
 808:	1f 5f       	subi	r17, 0xFF	; 255
				currentPassword[count] = c;
 80a:	e1 e0       	ldi	r30, 0x01	; 1
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	ec 0f       	add	r30, r28
 810:	fd 1f       	adc	r31, r29
 812:	e1 0f       	add	r30, r17
				
				lcd_clearRow(1);
 814:	f1 1d       	adc	r31, r1
 816:	00 83       	st	Z, r16
				lcd_gotoxy(0,1);
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	cc de       	rcall	.-616    	; 0x5b4 <lcd_clearRow>
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	80 e0       	ldi	r24, 0x00	; 0
				lcd_puts(currentPassword);
 820:	4a de       	rcall	.-876    	; 0x4b6 <lcd_gotoxy>
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	64 de       	rcall	.-824    	; 0x4f0 <lcd_puts>
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==2)
			{
				c=y;
 828:	c0 2e       	mov	r12, r16
				
				lcd_clearRow(1);
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==3)
 82a:	13 30       	cpi	r17, 0x03	; 3
 82c:	09 f0       	breq	.+2      	; 0x830 <keypad+0x1d8>
 82e:	69 cf       	rjmp	.-302    	; 0x702 <keypad+0xaa>
			{
				d=y;
				count=0;
				currentPassword[count] = d;
 830:	09 83       	std	Y+1, r16	; 0x01
				
				lcd_clearRow(1);
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	bf de       	rcall	.-642    	; 0x5b4 <lcd_clearRow>
 836:	61 e0       	ldi	r22, 0x01	; 1
				lcd_gotoxy(0,1);
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	3d de       	rcall	.-902    	; 0x4b6 <lcd_gotoxy>
 83c:	ce 01       	movw	r24, r28
 83e:	01 96       	adiw	r24, 0x01	; 1
				lcd_puts(currentPassword);
 840:	57 de       	rcall	.-850    	; 0x4f0 <lcd_puts>
 842:	e0 2e       	mov	r14, r16
 844:	10 e0       	ldi	r17, 0x00	; 0
 846:	5d cf       	rjmp	.-326    	; 0x702 <keypad+0xaa>
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
			if (count==3)
			{
				d=y;
 848:	fb 10       	cpse	r15, r11
				count=0;
 84a:	08 c0       	rjmp	.+16     	; 0x85c <keypad+0x204>
 84c:	da 10       	cpse	r13, r10
				lcd_gotoxy(0,1);
				lcd_puts(currentPassword);
			}
		}
	}
	if (a==e && b==f && c==g && d==h)			//Comparison between correct password and inputs
 84e:	08 c0       	rjmp	.+16     	; 0x860 <keypad+0x208>
 850:	c9 10       	cpse	r12, r9
 852:	08 c0       	rjmp	.+16     	; 0x864 <keypad+0x20c>
 854:	e8 14       	cp	r14, r8
 856:	41 f0       	breq	.+16     	; 0x868 <keypad+0x210>
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	07 c0       	rjmp	.+14     	; 0x86a <keypad+0x212>
 85c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 1;								//Return 1 if correct and 0 if incorrect
	}
	else
	{
		return 0;
 85e:	05 c0       	rjmp	.+10     	; 0x86a <keypad+0x212>
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	03 c0       	rjmp	.+6      	; 0x86a <keypad+0x212>
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	01 c0       	rjmp	.+2      	; 0x86a <keypad+0x212>
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	0f 90       	pop	r0
 86c:	0f 90       	pop	r0
			}
		}
	}
	if (a==e && b==f && c==g && d==h)			//Comparison between correct password and inputs
	{
		return 1;								//Return 1 if correct and 0 if incorrect
 86e:	0f 90       	pop	r0
	else
	{
		return 0;
	}
	
 870:	0f 90       	pop	r0
 872:	0f 90       	pop	r0
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	df 90       	pop	r13
 882:	cf 90       	pop	r12
 884:	bf 90       	pop	r11
 886:	af 90       	pop	r10
 888:	9f 90       	pop	r9
 88a:	8f 90       	pop	r8
 88c:	08 95       	ret

0000088e <main>:
 88e:	84 b1       	in	r24, 0x04	; 4
 890:	87 60       	ori	r24, 0x07	; 7
 892:	84 b9       	out	0x04, r24	; 4
main(void)
{
	/* set SS, MOSI and SCK as output, pins 53 (PB0), 51 (PB2) and 52 (PB1) */
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // SS as output
	/* set SPI enable and master/slave select, making MEGA the master */
	SPCR |= (1 << 6) | (1 << 4);
 894:	8c b5       	in	r24, 0x2c	; 44
 896:	80 65       	ori	r24, 0x50	; 80
 898:	8c bd       	out	0x2c, r24	; 44
	/* set SPI clock rate to 1 MHz */
	SPCR |= (1 << 0);
 89a:	8c b5       	in	r24, 0x2c	; 44
 89c:	81 60       	ori	r24, 0x01	; 1
 89e:	8c bd       	out	0x2c, r24	; 44
	
	/* Set PIR as input */
	DDRH &= ~(1 << PH4);
 8a0:	e1 e0       	ldi	r30, 0x01	; 1
 8a2:	f1 e0       	ldi	r31, 0x01	; 1
 8a4:	80 81       	ld	r24, Z
 8a6:	8f 7e       	andi	r24, 0xEF	; 239
 8a8:	80 83       	st	Z, r24
	
	/* Initialize lcd */
	lcd_init(LCD_DISP_ON);
 8aa:	8c e0       	ldi	r24, 0x0C	; 12
 8ac:	2f de       	rcall	.-930    	; 0x50c <lcd_init>
	
	lcd_clrscr();
 8ae:	0b de       	rcall	.-1002   	; 0x4c6 <lcd_clrscr>
 8b0:	82 e0       	ldi	r24, 0x02	; 2
	
	lcd_puts("Alarm system");
 8b2:	92 e0       	ldi	r25, 0x02	; 2
 8b4:	1d de       	rcall	.-966    	; 0x4f0 <lcd_puts>
 8b6:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <state>
	
	while (1)
	{
		switch(state)
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	19 f1       	breq	.+70     	; 0x904 <main+0x76>
 8be:	38 f0       	brcs	.+14     	; 0x8ce <main+0x40>
 8c0:	82 30       	cpi	r24, 0x02	; 2
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <main+0x38>
 8c4:	40 c0       	rjmp	.+128    	; 0x946 <main+0xb8>
 8c6:	83 30       	cpi	r24, 0x03	; 3
 8c8:	09 f4       	brne	.+2      	; 0x8cc <main+0x3e>
 8ca:	54 c0       	rjmp	.+168    	; 0x974 <main+0xe6>
 8cc:	f4 cf       	rjmp	.-24     	; 0x8b6 <main+0x28>
 8ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
		{
			case ACTIVATED:
			/* Check PIR value */
			if ((PINH & (1 << PH4)) == (1 << PH4))
 8d2:	84 ff       	sbrs	r24, 4
 8d4:	0c c0       	rjmp	.+24     	; 0x8ee <main+0x60>
			{
				//motion detected
				lcd_clearRow(1);
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	6d de       	rcall	.-806    	; 0x5b4 <lcd_clearRow>
				lcd_gotoxy(0,1);
 8da:	61 e0       	ldi	r22, 0x01	; 1
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	eb dd       	rcall	.-1066   	; 0x4b6 <lcd_gotoxy>
				lcd_puts("Motion detected");
 8e0:	8f e0       	ldi	r24, 0x0F	; 15
 8e2:	92 e0       	ldi	r25, 0x02	; 2
 8e4:	05 de       	rcall	.-1014   	; 0x4f0 <lcd_puts>
				state = SETTIMER;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <state>
				} else {
				//no motion
				lcd_clearRow(1);
 8ec:	e4 cf       	rjmp	.-56     	; 0x8b6 <main+0x28>
 8ee:	81 e0       	ldi	r24, 0x01	; 1
				lcd_gotoxy(0,1);
 8f0:	61 de       	rcall	.-830    	; 0x5b4 <lcd_clearRow>
 8f2:	61 e0       	ldi	r22, 0x01	; 1
 8f4:	80 e0       	ldi	r24, 0x00	; 0
				lcd_puts("No motion");
 8f6:	df dd       	rcall	.-1090   	; 0x4b6 <lcd_gotoxy>
 8f8:	8f e1       	ldi	r24, 0x1F	; 31
 8fa:	92 e0       	ldi	r25, 0x02	; 2
				state = ACTIVATED;
 8fc:	f9 dd       	rcall	.-1038   	; 0x4f0 <lcd_puts>
 8fe:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <state>
			}
			break;
			
			case SETTIMER:
			lcd_clearRow(1);
 902:	d9 cf       	rjmp	.-78     	; 0x8b6 <main+0x28>
 904:	81 e0       	ldi	r24, 0x01	; 1
			lcd_gotoxy(0,1);
 906:	56 de       	rcall	.-852    	; 0x5b4 <lcd_clearRow>
 908:	61 e0       	ldi	r22, 0x01	; 1
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	d4 dd       	rcall	.-1112   	; 0x4b6 <lcd_gotoxy>
			lcd_puts("Timer start");
 90e:	89 e2       	ldi	r24, 0x29	; 41
 910:	92 e0       	ldi	r25, 0x02	; 2
 912:	ee dd       	rcall	.-1060   	; 0x4f0 <lcd_puts>
 914:	f8 94       	cli
			
			cli();
 916:	e4 e6       	ldi	r30, 0x64	; 100
			
			/* set up the 16-bit timer/counter1 */
			PRR0 &= ~(1 << PRTIM1);
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	87 7f       	andi	r24, 0xF7	; 247
 91e:	80 83       	st	Z, r24
 920:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
			TCNT1 = 0; // reset timer/counter1 register
 924:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 928:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
			TCCR1A = 0x00;
 92c:	85 e0       	ldi	r24, 0x05	; 5
			TCCR1B = 0b00000101;
 92e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
			
			TIMSK1 |= (1 << TOIE1); // enable overflow interrupt
 932:	ef e6       	ldi	r30, 0x6F	; 111
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	81 60       	ori	r24, 0x01	; 1
			sei();
			state = ASKPASSWORD;
 93a:	80 83       	st	Z, r24
 93c:	78 94       	sei
			break;
 93e:	82 e0       	ldi	r24, 0x02	; 2
			
			case ASKPASSWORD:
			lcd_clearRow(1);
 940:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <state>
			lcd_gotoxy(0,1);
 944:	b8 cf       	rjmp	.-144    	; 0x8b6 <main+0x28>
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	35 de       	rcall	.-918    	; 0x5b4 <lcd_clearRow>
			lcd_puts("Give password");
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	b3 dd       	rcall	.-1178   	; 0x4b6 <lcd_gotoxy>
 950:	85 e3       	ldi	r24, 0x35	; 53
			uint8_t pw = keypad();
 952:	92 e0       	ldi	r25, 0x02	; 2
			if (pw == 1)
 954:	cd dd       	rcall	.-1126   	; 0x4f0 <lcd_puts>
 956:	80 de       	rcall	.-768    	; 0x658 <keypad>
			{
				 sendCommand(DEACTIVATE);
 958:	81 30       	cpi	r24, 0x01	; 1
 95a:	31 f4       	brne	.+12     	; 0x968 <main+0xda>
				 state = DEACTIVATED;
 95c:	83 e1       	ldi	r24, 0x13	; 19
 95e:	1f de       	rcall	.-962    	; 0x59e <sendCommand>
 960:	83 e0       	ldi	r24, 0x03	; 3
			} else 
			{
				sendCommand(ALARM);
 962:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <state>
 966:	a7 cf       	rjmp	.-178    	; 0x8b6 <main+0x28>
				state = ASKPASSWORD;
 968:	84 e1       	ldi	r24, 0x14	; 20
 96a:	19 de       	rcall	.-974    	; 0x59e <sendCommand>
 96c:	82 e0       	ldi	r24, 0x02	; 2
 96e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <state>
			}
			break;
			
			case DEACTIVATED:
			lcd_clearRow(1);
 972:	a1 cf       	rjmp	.-190    	; 0x8b6 <main+0x28>
 974:	81 e0       	ldi	r24, 0x01	; 1
			lcd_gotoxy(0,1);
 976:	1e de       	rcall	.-964    	; 0x5b4 <lcd_clearRow>
 978:	61 e0       	ldi	r22, 0x01	; 1
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	9c dd       	rcall	.-1224   	; 0x4b6 <lcd_gotoxy>
			lcd_puts("Alarm deactivated");
 97e:	83 e4       	ldi	r24, 0x43	; 67
 980:	92 e0       	ldi	r25, 0x02	; 2
 982:	b6 dd       	rcall	.-1172   	; 0x4f0 <lcd_puts>
 984:	98 cf       	rjmp	.-208    	; 0x8b6 <main+0x28>

00000986 <__tablejump2__>:
			//todo rearm
			break;
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	88 1f       	adc	r24, r24
 98c:	8b bf       	out	0x3b, r24	; 59
 98e:	07 90       	elpm	r0, Z+
 990:	f6 91       	elpm	r31, Z
 992:	e0 2d       	mov	r30, r0
 994:	19 94       	eijmp

00000996 <_exit>:
 996:	f8 94       	cli

00000998 <__stop_program>:
 998:	ff cf       	rjmp	.-2      	; 0x998 <__stop_program>
